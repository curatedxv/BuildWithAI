import requests
from bs4 import BeautifulSoup
from google import genai
import os
from dotenv import load_dotenv

load_dotenv()

class module1:
    # Configure the Gemini API key
    my_api_key = None

    def __init__(self,api_key):
        self.my_api_key = api_key

    def fetch_webpage_text(self, url):
        """Fetches the text content from a given URL.

        Args:
            url: The URL of the webpage.

        Returns:
            The extracted text content, or None if an error occurs.
        """
        try:
            headers = {
                "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) "
                            "AppleWebKit/537.36 (KHTML, like Gecko) "
                            "Chrome/122.0.0.0 Safari/537.36",
                "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8",
                "Accept-Language": "en-US,en;q=0.9",
                "Accept-Encoding": "gzip, deflate, br",
                "Connection": "keep-alive"
            }

            response = requests.get(url, headers=headers)
            response.raise_for_status()

            soup = BeautifulSoup(response.content, "html.parser")
            text = soup.get_text(separator=" ", strip=True)
            # Extract the title
            title_tag = soup.find("title")
            if title_tag:
                title = title_tag.get_text(strip=True)
            else:
                raise Exception("Title not found")
            return title, text
        except Exception as e:
            raise Exception("Failed to fetch the webpage text, reason: " + str(e))

    def summarize_text_with_gemini(self, text, prompt_instructions="Summarize the following text:"):
        """Summarizes the given text using the Gemini Pro model.

        Args:
            text: The text to summarize.
            prompt_instructions: Instructions to add to the prompt.

        Returns:
            The summary generated by Gemini, or None if an error occurs.
        """
        try:
            client = genai.Client(api_key = self.my_api_key)
            prompt = f"{prompt_instructions}\n\n{text}"
            response = client.models.generate_content(
                model="gemini-2.0-flash", contents=prompt
            )
            return response.text
        except Exception as e:
            raise Exception("Failed to summarize the text with Gemini, reason: " + str(e))

    def whole_module(self,url):
        # Fetch the text from the URL
        try:
            title, webpage_text = self.fetch_webpage_text(url)
            if webpage_text:
                # Summarize the text using Gemini
                summary = self.summarize_text_with_gemini(webpage_text)
        except Exception as e:
            raise Exception("Issues found, reason: " + str(e))
        return title, summary



